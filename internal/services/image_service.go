package internal

import (
	"context"
	"database/sql"
	"fmt"
	"os"
	"path/filepath"
	"strconv"

	"github.com/fogleman/gg"
	db "github.com/franzego/stage02/db/sqlc"
)

type ImageService struct {
	q *db.Queries
}

func NewImageService(queries *db.Queries) *ImageService {
	return &ImageService{
		q: queries,
	}
}

func (s *ImageService) GenerateSummaryImage(ctx context.Context) error {
	// Ensure cache directory exists (configurable via CACHE_DIR env)
	cacheDir := os.Getenv("CACHE_DIR")
	if cacheDir == "" {
		cacheDir = "cache"
	}
	if err := os.MkdirAll(cacheDir, 0755); err != nil {
		return fmt.Errorf("failed to create cache directory: %w", err)
	}

	// Get total countries
	totalCount, err := s.q.GetTotalCount(ctx)
	if err != nil {
		return fmt.Errorf("failed to get total count: %w", err)
	}

	// Get last refresh time
	lastRefresh, err := s.q.GetLatestRefreshTime(ctx)
	if err != nil {
		return fmt.Errorf("failed to get refresh time: %w", err)
	}

	// Get top 5 countries by GDP
	topCountries, err := s.q.GetTopCountriesByGDP(ctx, 5)
	if err != nil {
		return fmt.Errorf("failed to get top countries: %w", err)
	}

	// Create image context (800x600 pixels)
	dc := gg.NewContext(800, 600)

	// Set background color (dark blue gradient look)
	dc.SetRGB(0.05, 0.1, 0.2)
	dc.Clear()

	// Add border
	dc.SetRGB(0.2, 0.4, 0.6)
	dc.SetLineWidth(4)
	dc.DrawRectangle(10, 10, 780, 580)
	dc.Stroke()

	// Title
	dc.SetRGB(1, 1, 1)
	if err := dc.LoadFontFace("/usr/share/fonts/truetype/ubuntu/Ubuntu-R.ttf", 48); err != nil {
		// Fallback: use default font
		dc.SetRGB(1, 1, 1)
		fmt.Printf("Error loading title font: %v\n", err)
	}
	dc.DrawStringAnchored("Country Statistics", 400, 60, 0.5, 0.5)

	// Total countries
	if err := dc.LoadFontFace("/usr/share/fonts/truetype/ubuntu/Ubuntu-R.ttf", 32); err == nil {
		dc.SetRGB(0.3, 0.8, 1)
		dc.DrawStringAnchored(fmt.Sprintf("Total Countries: %d", totalCount), 400, 130, 0.5, 0.5)
	} else {
		fmt.Printf("Error loading total countries font: %v\n", err)
	}

	// Last refresh time
	if err := dc.LoadFontFace("/usr/share/fonts/truetype/ubuntu/Ubuntu-R.ttf", 24); err == nil {
		dc.SetRGB(0.7, 0.7, 0.7)
		refreshTime := "Never"
		if lastRefresh.Valid {
			refreshTime = lastRefresh.Time.Format("2006-01-02 15:04:05 MST")
		}
		dc.DrawStringAnchored(fmt.Sprintf("Last Refreshed: %s", refreshTime), 400, 170, 0.5, 0.5)
	} else {
		fmt.Printf("Error loading refresh time font: %v\n", err)
	}

	// Top 5 countries header
	if err := dc.LoadFontFace("/usr/share/fonts/truetype/ubuntu/Ubuntu-R.ttf", 28); err == nil {
		dc.SetRGB(1, 0.8, 0.2)
		dc.DrawStringAnchored("Top 5 Countries by Estimated GDP", 400, 230, 0.5, 0.5)
	} else {
		fmt.Printf("Error loading header font: %v\n", err)
	}

	// Draw top countries
	if err := dc.LoadFontFace("/usr/share/fonts/truetype/ubuntu/Ubuntu-R.ttf", 22); err == nil {
		yPos := 280.0
		for i, country := range topCountries {
			dc.SetRGB(0.9, 0.9, 0.9)

			gdpValue := "N/A"
			if country.EstimatedGdp.Valid {
				v := parseNullStringFloat(country.EstimatedGdp)
				gdpValue = fmt.Sprintf("$%.2f B", v/1_000_000_000)
			}

			line := fmt.Sprintf("%d. %s - %s", i+1, country.Name, gdpValue)
			dc.DrawStringAnchored(line, 400, yPos, 0.5, 0.5)
			yPos += 40
		}
	}

	// Footer
	if err := dc.LoadFontFace("/System/Library/Fonts/Helvetica.ttc", 18); err == nil {
		dc.SetRGB(0.5, 0.5, 0.5)
		dc.DrawStringAnchored("Generated by Country Currency API", 400, 560, 0.5, 0.5)
	}

	// Save image
	cacheDir = os.Getenv("CACHE_DIR")
	if cacheDir == "" {
		cacheDir = "cache"
	}
	if err := dc.SavePNG(filepath.Join(cacheDir, "summary.png")); err != nil {
		return fmt.Errorf("failed to save image: %w", err)
	}

	return nil
}

// parseNullStringFloat parses sql.NullString numeric values to float64
func parseNullStringFloat(ns sql.NullString) float64 {
	if !ns.Valid {
		return 0
	}
	v, err := strconv.ParseFloat(ns.String, 64)
	if err != nil {
		return 0
	}
	return v
}
