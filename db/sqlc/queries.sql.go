// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const deleteCountryByName = `-- name: DeleteCountryByName :exec
DELETE FROM countries WHERE LOWER(name) = LOWER(?)
`

func (q *Queries) DeleteCountryByName(ctx context.Context, lower string) error {
	_, err := q.db.ExecContext(ctx, deleteCountryByName, lower)
	return err
}

const getAllCountries = `-- name: GetAllCountries :many
SELECT id, name, capital, region, population, currency_code, exchange_rate, estimated_gdp, flag_url, last_refreshed_at FROM countries
ORDER BY id
`

func (q *Queries) GetAllCountries(ctx context.Context) ([]Country, error) {
	rows, err := q.db.QueryContext(ctx, getAllCountries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Country
	for rows.Next() {
		var i Country
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Capital,
			&i.Region,
			&i.Population,
			&i.CurrencyCode,
			&i.ExchangeRate,
			&i.EstimatedGdp,
			&i.FlagUrl,
			&i.LastRefreshedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountryByName = `-- name: GetCountryByName :one
SELECT id, name, capital, region, population, currency_code, exchange_rate, estimated_gdp, flag_url, last_refreshed_at FROM countries
WHERE LOWER(name) = LOWER(?)
`

func (q *Queries) GetCountryByName(ctx context.Context, lower string) (Country, error) {
	row := q.db.QueryRowContext(ctx, getCountryByName, lower)
	var i Country
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Capital,
		&i.Region,
		&i.Population,
		&i.CurrencyCode,
		&i.ExchangeRate,
		&i.EstimatedGdp,
		&i.FlagUrl,
		&i.LastRefreshedAt,
	)
	return i, err
}

const getLatestRefreshTime = `-- name: GetLatestRefreshTime :one
SELECT last_refreshed_at as last_refresh FROM countries
ORDER BY last_refreshed_at DESC
LIMIT 1
`

func (q *Queries) GetLatestRefreshTime(ctx context.Context) (sql.NullTime, error) {
	row := q.db.QueryRowContext(ctx, getLatestRefreshTime)
	var last_refresh sql.NullTime
	err := row.Scan(&last_refresh)
	return last_refresh, err
}

const getTopCountriesByGDP = `-- name: GetTopCountriesByGDP :many
SELECT id, name, capital, region, population, currency_code, exchange_rate, estimated_gdp, flag_url, last_refreshed_at FROM countries
WHERE estimated_gdp IS NOT NULL
ORDER BY estimated_gdp DESC
LIMIT ?
`

func (q *Queries) GetTopCountriesByGDP(ctx context.Context, limit int32) ([]Country, error) {
	rows, err := q.db.QueryContext(ctx, getTopCountriesByGDP, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Country
	for rows.Next() {
		var i Country
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Capital,
			&i.Region,
			&i.Population,
			&i.CurrencyCode,
			&i.ExchangeRate,
			&i.EstimatedGdp,
			&i.FlagUrl,
			&i.LastRefreshedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalCount = `-- name: GetTotalCount :one
SELECT COUNT(*) as total FROM countries
`

func (q *Queries) GetTotalCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalCount)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const upsertCountry = `-- name: UpsertCountry :exec
INSERT INTO countries (
    name, capital, region, population, 
    currency_code, exchange_rate, estimated_gdp, flag_url, last_refreshed_at
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, NOW())
ON DUPLICATE KEY UPDATE
    capital = VALUES(capital),
    region = VALUES(region),
    population = VALUES(population),
    currency_code = VALUES(currency_code),
    exchange_rate = VALUES(exchange_rate),
    estimated_gdp = VALUES(estimated_gdp),
    flag_url = VALUES(flag_url),
    last_refreshed_at = NOW()
`

type UpsertCountryParams struct {
	Name         string         `json:"name"`
	Capital      sql.NullString `json:"capital"`
	Region       sql.NullString `json:"region"`
	Population   int64          `json:"population"`
	CurrencyCode sql.NullString `json:"currency_code"`
	ExchangeRate sql.NullString `json:"exchange_rate"`
	EstimatedGdp sql.NullString `json:"estimated_gdp"`
	FlagUrl      sql.NullString `json:"flag_url"`
}

func (q *Queries) UpsertCountry(ctx context.Context, arg UpsertCountryParams) error {
	_, err := q.db.ExecContext(ctx, upsertCountry,
		arg.Name,
		arg.Capital,
		arg.Region,
		arg.Population,
		arg.CurrencyCode,
		arg.ExchangeRate,
		arg.EstimatedGdp,
		arg.FlagUrl,
	)
	return err
}
